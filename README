The GitHub Gem
=============

This gem'll work hand-in-hand with GitHub's API to help you out.

Catch us in the #github room on freenode if you want to get involved.  Or just fork and send a pull request.

===========
Getting started
===========

  $ gem install defunkt-github -s http://gems.github.com

Run it:

  $ github <command> <args>


=============
Pulling Upstream Changes
=============

Let's say you just forked `github-gem` on GitHub from defunkt.

  $ git clone git://github.com/YOU/github-gem.git
  $ cd github-gem
  $ github pull defunkt

This will setup a remote and branch for defunkt's repository at master. 
In this case, a 'defunkt/master' branch.

If defunkt makes some changes you want, simply `github pull defunkt`.  This will
leave you in the 'defunkt/master' branch after pulling changes from defunkt's
remote.  After confirming that defunkt's changes were what you wanted, run `git
checkout master` and then `git merge defunkt/master` to merge defunkt's changes
into your own master branch.  In summary:

  $ github pull defunkt
  $ git checkout master
  $ git merge defunkt/master

If you've already reviewed defunkt's changes and just want to merge them into your 
master branch, use the `merge` flag:

  $ github pull --merge defunkt


==========
Fetching and Evaluation Downstream Changes
==========

If you are the maintainer of a project, you will often need to fetch commits
from other developers, evaluate and/or test them, then merge them into the
project.

Let's say you are 'defunkt' and 'mojombo' has forked your 'github-gem' repo,
made some changes and issues you a pull request for his 'master' branch.

From the root of the project, you can do:

  $ github fetch mojombo master
  
This will leave you in the 'mojombo/master' branch after fetching his commits.
Your local 'mojombo/master' branch is now at the exact same place as mojombo's 
'master' branch. You can now run tests or evaluate the code for awesomeness.

If mojombo's changes are good, you'll want to merge your 'master' (or another
branch) into those changes so you can retest post-integration:

  $ git merge master
  
Test/analyze again and if everything is ok:
  
  $ git checkout master
  $ git merge mojombo/master
  
The latter command will be a fast-forward merge since you already did the
real merge previously.


==========
Contributors
==========

- defunkt
- maddox
- halorgium
- kballard
- mojombo
